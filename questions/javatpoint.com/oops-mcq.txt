&[Index: 0
Question: Which of the following language was developed as the first purely object programming language?
CodeBlock:

Options:
0 . smalltalk
1 . c++
2 . kotlin
3 . java
4 . 
Correct Answer: 0

Explanation: This programming language was invented as the first pure OOPS (object-oriented) language. This language was designed by Alan Kay in the early 1970s.

 Index: 1
Question: Who developed object-oriented programming?
CodeBlock:

Options:
0 . adele goldberg
1 . dennis ritchie
2 . alan kay
3 . andrea ferro
4 . 
Correct Answer: 2

Explanation: In the year 1970, Alan Kay gave Object-Oriented programming. He coined the concept of OOPS at a grad school in the year 1966 or 1967. Alan kay, Adele Goldberg, Dan Ingalls and others developed the first Smalltalk programming language, which follows the OOPS concept.

 Index: 2
Question: Which of the following is not an OOPS concept?
CodeBlock:

Options:
0 . encapsulation
1 . polymorphism
2 . exception
3 . abstraction
4 . 
Correct Answer: 2

Explanation: None.

 Index: 3
Question: Which feature of OOPS described the reusability of code?
CodeBlock:

Options:
0 . abstraction
1 . encapsulation
2 . polymorphism
3 . inheritance
4 . 
Correct Answer: 3

Explanation: Inheritance is the feature of OOPS, which allows the users of OOPS to reuse the code which is already written. This OOPS feature inherits the features of another class in the programs. This mechanism actually inherits the fields and methods of the superclass.

 Index: 4
Question: Which of the following language supports polymorphism but not the classes?
CodeBlock:

Options:
0 . c++ programming language
1 . java programming language
2 . ada programming language
3 . c# programming language
4 . 
Correct Answer: 2

Explanation: It is a programming language that disapproves of the concept of polymorphism but supports the concept of classes. It is an object-based language. So, it does not follow the Object-oriented programming concepts.

 Index: 5
Question: Which among the following feature is not in the general definition of OOPS?
CodeBlock:

Options:
0 . modularity
1 . efficient code
2 . code reusability
3 . duplicate or redundant data
4 . 
Correct Answer: 3

Explanation: Duplicacy or Redundancy of data is a feature which totally dependent on the programmers. So, it cannot be created by the OOPS.

 Index: 6
Question: Which feature of OOPS derives the class from another class?
CodeBlock:

Options:
0 . inheritance
1 . data hiding
2 . encapsulation
3 . polymorphism
4 . 
Correct Answer: 0

Explanation: Inheritance is an important OOPS feature which derives the class from the base class or superclass. This OOPS feature inherits the features of another class in the programs. This mechanism actually inherits the fields and methods of the superclass.

 Index: 7
Question: Define the programming language, which does not support all four types of inheritance?
CodeBlock:

Options:
0 . smalltalk
1 . kotlin
2 . java
3 . c++
4 . 
Correct Answer: 2

Explanation: Java is a programming language that disapproves of the concept of 'multiple inheritance'. So, it does not agree with all types of inheritance. But, we can implement 'multiple inheritance' in Java language using the interface concept.

 Index: 8
Question: A single program of OOPS contains _______ classes?
CodeBlock:

Options:
0 . only 1
1 . only 999
2 . only 100
3 . any number
4 . 
Correct Answer: 3

Explanation: We can define any number of classes with different names in a single program of OOPS.

 Index: 9
Question: Which operator from the following can be used to illustrate the feature of polymorphism?
CodeBlock:

Options:
0 . overloading <<
1 . overloading &&
2 . overloading | |
3 . overloading +=
4 . 
Correct Answer: 0

Explanation: << is an insertion operator which is used for overloading (polymorphism). 

 Index: 10
Question: Which two features of object-oriented programming are the same?
CodeBlock:

Options:
0 . abstraction and polymorphism features are the same
1 . inheritance and encapsulation features are the same
2 . encapsulation and polymorphism features are the same
3 . encapsulation and abstraction
4 . 
Correct Answer: 3

Explanation: Encapsulation and Abstraction are the same OOPS concepts. Encapsulation hides the features of the object and binds all the properties inside a single class. And abstraction is a feature that shows the required data to the user.

 Index: 11
Question: Which header file is required by the C++ programming language to use the OOPS concept?
CodeBlock:

Options:
0 . stdio.h
1 . iostream.h
2 . stdlib.h
3 . we can easily use the oops concepts in c++ programs without using any header file.
4 . 
Correct Answer: 3

Explanation: There is no need to use any particular header file for using the OOPS concept in the C++ programs. The C++ functions and variables have their respective header files, which should be defined in the program.

 Index: 12
Question: Which of the following definition is incorrect for polymorphism?
CodeBlock:

Options:
0 . polymorphism helps in redefining the same functionality
1 . polymorphism concept is the feature of object-oriented programming (oop)
2 . it always increases the overhead of function definition
3 . ease in the readability of the program
4 . 
Correct Answer: 2

Explanation: This concept of OOPS never increases the overhead of function definition.

 Index: 13
Question: Which among the following cannot be used for the concept of polymorphism?
CodeBlock:

Options:
0 . static member function
1 . constructor overloading
2 . member function overloading
3 . global member function
4 . 
Correct Answer: 0

Explanation: These functions are not an object property. That's why they cannot be acceptable for overriding or overloading.

 Index: 14
Question: Which function best describe the concept of polymorphism in programming languages?
CodeBlock:

Options:
0 . class member function
1 . virtual function
2 . inline function
3 . undefined function
4 . 
Correct Answer: 1

Explanation: Only those functions are used to achieve the polymorphism, which are declared as 'virtual'. These functions let the OOPS programs decide at runtime which function is to be called by the pointer.

 Index: 15
Question: Which member function is assumed to call first when there is a case of using function overloading or abstract class?
CodeBlock:

Options:
0 . global function
1 . local function
2 . function with lowest priority
3 . function with the highest priority
4 . 
Correct Answer: 3

Explanation: The member function with the highest priority is called first when there is function overloading, or abstract class is used.

 Index: 16
Question: Is it true to use polymorphism in the C programming language?
CodeBlock:

Options:
0 . true
1 . false
2 . 
3 . 
4 . 
Correct Answer: 0

Explanation: Yes, we can use the concept of polymorphism in the C programming language. Users can use structures and then declare pointers in C programming language, which in turn points to some function.Here, he/she can easily simulate the functions which are not exactly member function. Hence, users can manipulate the concept of polymorphism in the C language.

 Index: 17
Question: Which of the following language uses the classes but not the polymorphism concept?
CodeBlock:

Options:
0 . procedure oriented language
1 . object-based language
2 . class-based language
3 . if classes are used, then the polymorphism concept will always be used in the programming languages.
4 . 
Correct Answer: 1

Explanation: Object-based languages are those languages which support the definition of classes but not the polymorphism. Inheritance is also another feature which is not supported by these languages.

 Index: 18
Question: Which of the following OOP concept is not true for the C++ programming language?
CodeBlock:

Options:
0 . a class must have member functions
1 . c++ program can be easily written without the use of classes
2 . at least one instance should be declared within the c++ program
3 . c++ program must contain at least one class
4 . 
Correct Answer: 3

Explanation: Use of class in the C++ language is not mandatory. Programs can be easily written without the use of classes. C++ programs classes may or may not contain the member function. That's why it is not a necessary situation in the C++ language.

 Index: 19
Question: What is the extra feature in classes which was not in the structures?
CodeBlock:

Options:
0 . member functions
1 . data members
2 . public access specifier
3 . static data allowed
4 . 
Correct Answer: 0

Explanation: Member function is an extra feature which is allowed in class but not in the concept of structures.

 Index: 20
Question: How many types of polymorphism in the C++ programming language?
CodeBlock:

Options:
0 . three types of polymorphism
1 . two types of polymorphism
2 . five types of polymorphism
3 . four types of polymorphism
4 . 
Correct Answer: 1

Explanation: C++ programming language has two types of polymorphism: 1. Runtime Polymorphism 2. Compile-time PolymorphismRuntime Polymorphism: It is meet by the function overriding. This polymorphism is also known as late or dynamic binding.Compile-time Polymorphism: It is meet by the operator and function overloading. This polymorphism is also known as early or static binding.

 Index: 21
Question: Which of the following feature is also known as run-time binding or late binding?
CodeBlock:

Options:
0 . dynamic typing
1 . dynamic loading
2 . dynamic binding
3 . data hiding
4 . 
Correct Answer: 2

Explanation: Dynamic binding or runtime binding or late binding is that type of binding which happens at the execution time of the program or code. Function or method overriding is the perfect example of this type of binding. Virtual functions are used to achieve the concept of function overriding.

 Index: 22
Question: Which among the following is not a member of the class?
CodeBlock:

Options:
0 . virtual function
1 . const function
2 . static function
3 . friend function
4 . 
Correct Answer: 3

Explanation: The public member functions of a class can easily access the private data members of the same class.This is achieved by the "friend", which is a non-member function to the class. Its private data can be accessed. That's why the friend function is not a member of the class.

 Index: 23
Question: Which of the following class is known as the generic class?
CodeBlock:

Options:
0 . final class
1 . template class
2 . abstract class
3 . efficient code
4 . 
Correct Answer: 1

Explanation: Template classes are those classes which can be used for any value of data type. So, these are known as a generic class.Template classes help in making the genetic classes and generate the objects of classes based on the parameters. This type of class also saves system memory.

 Index: 24
Question: Which operator overloads using the friend function?
CodeBlock:

Options:
0 . *
1 . ( )
2 . ->
3 . =
4 . 
Correct Answer: 0

Explanation: The operators ( ->, ( ), =) cannot be overloaded using the friend function because if they are overloaded, then the code will show the compilation error. That's why * (asterisk) is a symbol that can be overloaded using the friend function.

 Index: 25
Question: Which of the following OOP concept binds the code and data together and keeps them secure from the outside world?
CodeBlock:

Options:
0 . polymorphism
1 . inheritance
2 . abstraction
3 . encapsulation
4 . 
Correct Answer: 3

Explanation: Encapsulation is an important concept of Object-oriented programming. This concept binds the data and methods in a single unit. It binds the methods which manipulate the data.

 Index: 26
Question: Which member of the superclass is never accessible to the subclass?
CodeBlock:

Options:
0 . public member
1 . protected member
2 . private member
3 . all of the mentioned
4 . 
Correct Answer: 2

Explanation: Private is a member of a class which never be accessible to the derived class.

 Index: 27
Question: What is the size of a class?
CodeBlock:

Options:
0 . sum of the size of all inherited variables along with the variables of the same class
1 . the size of the class is the largest size of the variable of the same class
2 . classes in the programming languages do not have any size
3 . sum of the size of all the variables within a class.
4 . 
Correct Answer: 2

Explanation: The object size defines the size of the class. That's why classes do not have any size.

 Index: 28
Question: Which class cannot create its instance?
CodeBlock:

Options:
0 . parent class
1 . nested class
2 . anonymous class
3 . abstract class
4 . 
Correct Answer: 3

Explanation: The instance of the abstract class can't be created because it will not have any constructor of its own. Hence while creating an instance of a class, it can't initialize the object members.

 Index: 29
Question: Encapsulation adds the function in a user-defined structure.
CodeBlock:

Options:
0 . true
1 . false
2 . 
3 . 
4 . 
Correct Answer: 1

Explanation: The encapsulation concept does not add the function in a user-defined structure because if the member functions are involved, then the user cannot call the structures defined by it.

 Index: 30
Question: Which of the following variable violates the definition of encapsulation?
CodeBlock:

Options:
0 . array variables
1 . local variables
2 . global variables
3 . public variables
4 . 
Correct Answer: 2

Explanation: Global variable is a variable which violates the definition of encapsulation. The definition of encapsulation defines that the data or variable should be accessed by the specified set of elements. But, the global variable is accessible everywhere in the code. This type of variable does not hide the internal performance of the code. That's global variable violates the encapsulation concept.

 Index: 31
Question: How can the concept of encapsulation be achieved in the program?
CodeBlock:

Options:
0 . by using the access specifiers
1 . by using the concept of abstraction
2 . by using only private members
3 . by using the concept of inheritance
4 . 
Correct Answer: 0

Explanation: Users can achieve the concept of encapsulation by implementing the access specifiers in the code. It is not compulsory that the user use only private members.

 Index: 32
Question: The concept of encapsulation helps in writing which type of classes in the Java programming language?
CodeBlock:

Options:
0 . abstract classes
1 . wrapper classes
2 . mutable classes
3 . immutable classes
4 . 
Correct Answer: 3

Explanation: The concept of encapsulation helps in writing immutable classes in the Java programming language because these classes are used for caching purposes.

 Index: 33
Question: Encapsulation is_____?
CodeBlock:

Options:
0 . technique of combining more than one member functions into a single unit.
1 . mechanism of combining more than one data member into a single unit.
2 . mechanism of combining more than one data members and member functions that implement on those data members into a single unit
3 . technique of combining more than one data members and member functions into a single unit, which can manipulate any data.
4 . 
Correct Answer: 2

Explanation: Encapsulation is an OOPS mechanism that combines more than one data member and member function and implements the member functions on those data members into a single unit.

 Index: 34
Question: Which of the following statement of a program is not right?
CodeBlock:

Options:
0 . class teacher{ }; teacher s[5];
1 . class teacher{ }s;
2 . class teacher{ }; teacher s;
3 . class teacher{ }s[];
4 . 
Correct Answer: 3

Explanation: This statement is false because it must be compulsory to specify the array with its size.

 Index: 35
Question: Which of the following syntax is incorrect for the class definition?
CodeBlock:

Options:
0 . student class{ };
1 . class student{ student(int a){} };
2 . class teacher{ public: teacher(int a){ } };
3 . none of the mentioned
4 . 
Correct Answer: 0

Explanation: In this syntax, the keyword 'class' is present after the student. That's why this syntax is incorrect.

 Index: 36
Question: The object cannot be________?
CodeBlock:

Options:
0 . passed by copy
1 . passed as function
2 . passed by value
3 . passed by reference
4 . 
Correct Answer: 1

Explanation: The object cannot be passed as the function because it is an instance of a class. Only the objects passed by the value, reference or copy.

 Index: 37
Question: Which among the following feature does not come under the concept of OOPS?
CodeBlock:

Options:
0 . data binding
1 . data hiding
2 . platform independent
3 . message passing
4 . 
Correct Answer: 2

Explanation: Platform independence is a feature which does not come under the OOPS concepts. This feature depends on the programming language. C++ is an object-oriented programming language which is not a platform-independent language.

 Index: 38
Question: Which of the following feature may be breaked if the user does not use the classes in the code?
CodeBlock:

Options:
0 . object must be used violated
1 . only the encapsulation concept is violated
2 . inheritance cannot be implemented
3 . basically, all the features of oops get violated
4 . 
Correct Answer: 3

Explanation: If the user does not use the classes in the code, then all the OOP features get violated. And, the encapsulation and inheritance cannot be implemented without the use of classes.

 Index: 39
Question: Which of the following feature interacts one object with another object?
CodeBlock:

Options:
0 . message reading
1 . message passing
2 . data transfer
3 . data binding
4 . 
Correct Answer: 1

Explanation: Message passing is a feature of OOP that connects one object with another object.It is a concept of communication for passing the messages between the two objects. It allows objects to send and receive information among them.

 Index: 40
Question: Which definition best defines the concept of abstraction?
CodeBlock:

Options:
0 . hides the important data
1 . hides the implementation and showing only the features
2 . hiding the implementation
3 . showing the important data
4 . 
Correct Answer: 1

Explanation: It hides the implementation part and showing only the data and features which are required to the end-user.This technique is used to hide the complexity of code and its details from the user. It is also used to define a good interface in coding.

 Index: 41
Question: The combination of abstraction of the data and code is viewed in________.
CodeBlock:

Options:
0 . inheritance
1 . object
2 . class
3 . interfaces
4 . 
Correct Answer: 1

Explanation: Object is a technique which can be viewed as an abstraction of the combination of data and code. This OOPS concept uses the class data members and their functioning as the data abstraction. Code abstraction is used as the object of an inbuilt class.

 Index: 42
Question: The principle of abstraction___________
CodeBlock:

Options:
0 . is used to achieve oops.
1 . is used to avoid duplication
2 . use abstraction at its minimum
3 . is used to remove longer codes
4 . 
Correct Answer: 1

Explanation: The principle of abstraction is used to avoid the code duplicacy. In this technique, the program does not contain any redundant functions. And it also makes the program effective.

 Index: 43
Question: Which among the following concept is correct if a user using the concept of encapsulation in a code?
CodeBlock:

Options:
0 . the modification of the code can be additional overhead
1 . member functions can be used for modifying the data type of data members
2 . the data type of data member cannot be modified.
3 . the data type of the data member can be easily modified without modifying any other code
4 . 
Correct Answer: 3

Explanation: Data type of a data member can be easily modified without modifying any code. Member functions can never modify the data type of the data members in the same class.

 Index: 44
Question: Using the concept of encapsulation security of the data is ___________
CodeBlock:

Options:
0 . ensured to some extent
1 . purely ensured
2 . not ensured
3 . very low
4 . 
Correct Answer: 0

Explanation: The concept of encapsulation can only ensure data security to some extent.

 Index: 45
Question: Consider the following Java program and select the right option from the given options.
CodeBlock:
class marksofstudent
{  
     int subjectmarks;
     public : int* fun()
     { 
          return &subjectmarks; 
     }
};
main()
{
    marksofstudent s;
    int *ptr = c.fun() ;
    return 0;
}

Options:
0 . the above program violates the feature of encapsulation
1 . the above program may result in undesirable conditions
2 . the above program will generate an error
3 . the above program is good to go
4 . 
Correct Answer: 0

Explanation: The code in this question violates the definition of encapsulation.

 Index: 46
Question: The name of the default access specifier for the member functions or data members in the C++ programming language is_________.
CodeBlock:

Options:
0 . private access specifier
1 . public access specifier
2 . protected access specifier
3 . depends on compiler
4 . 
Correct Answer: 0

Explanation: If none of the access specifiers is used, then the data members and member functions are Private by default in C++ classes. This specifier is actually used to increase the privacy of information.

 Index: 47
Question: Which of the following option best illustrates a friend class?
CodeBlock:

Options:
0 . this class can access and manipulate all the private members of that class which connects to a friend.
1 . friend class can only access and manipulate the protected data members of that class that connects to a friend.
2 . friend class can't access any data member of another class but can use its methods
3 . friend class don't have any implementation
4 . 
Correct Answer: 0

Explanation: A friend class can easily access all the private data members of another class.

 Index: 48
Question: Which of the following definition best describes the concept of polymorphism?
CodeBlock:

Options:
0 . it is the ability to process the many messages and data in one way
1 . it is the ability to process the undefined messages or data in at least one way
2 . it is the ability to process the message or data in more than one form
3 . it is the ability to process the message or data in only one form
4 . 
Correct Answer: 2

Explanation: None.

 Index: 49
Question: Which class/ or set of classes can describe the concept of polymorphism in the following code?
CodeBlock:
abstract class student_details
{
   public : int marksofstudent;
   calculate_grade();
}
class topper:public student_details
{
    public : calculate_grade()
    { 
        return 15; 
    }
};
class average:public student_details
{ 
     public : calculate_grade()
     {
         return 30; 
     }
};
class failed{ int marksofstudent; };

Options:
0 . only the student_details class can show the concept of polymorphism
1 . the class which is 'failed' should also inherit class student for this code to work for polymorphism
2 . the student_details, topper and average classes together can show the concept of polymorphism
3 . only the student_details and topper class together can show the concept of polymorphism
4 . 
Correct Answer: 2

Explanation: None.

]