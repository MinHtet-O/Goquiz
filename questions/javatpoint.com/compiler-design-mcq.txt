&[Index: 0
Question: Users write the programs in which language?
CodeBlock:

Options:
0 . low-level language
1 . high-level language
2 . decimal-format
3 . middle-level language
4 . 
Correct Answer: 1

Explanation: Users write the program in a high-level language because it is easier to use, understand and remember. 

 Index: 1
Question: Which computer program accepts the high-level language and converts it into assembly language?
CodeBlock:

Options:
0 . interpreter
1 . linker
2 . assembler
3 . compiler
4 . 
Correct Answer: 3

Explanation: Compiler is a computer program that accepts the code written in a high-level language and converts that code into the assembly language. 

 Index: 2
Question: Does the compiler program translate the whole source code in one step?
CodeBlock:

Options:
0 . no
1 . depends on the compiler
2 . don't know
3 . yes
4 . 
Correct Answer: 3

Explanation: The compiler is that program which translates the whole high-level code into the machine code at once. 

 Index: 3
Question: Which of the following file is an output of the assembler?
CodeBlock:

Options:
0 . program file
1 . object file
2 . data file
3 . task file
4 . 
Correct Answer: 1

Explanation: The object file contains the object code, which is an output of an assembler. 

 Index: 4
Question: Which tool is used for grouping of characters in tokens in the compiler? 
CodeBlock:

Options:
0 . parser
1 . code optimizer
2 . code generator
3 . scanner
4 . 
Correct Answer: 3

Explanation: Scanner is a subroutine which is called by the compiler program. The scanner combines the characters and implements them to produce tokens.

 Index: 5
Question: What is the linker?
CodeBlock:

Options:
0 . it is always used before the program execution.
1 . it is required to create the load module.
2 . it is the same as the loader
3 . none of the above
4 . 
Correct Answer: 1

Explanation: Linker is a program in the compiler which is required to create a load module. 

 Index: 6
Question: Parsing is categorized into how many types?
CodeBlock:

Options:
0 . three types
1 . four types
2 . two types
3 . five types
4 . 
Correct Answer: 2

Explanation: In the compiler design, the parser is mainly categorized into top-down parsing and bottom-up parsing.

 Index: 7
Question: In which parsing, the parser constructs the parse tree from the start symbol and transforms it into the input symbol. 
CodeBlock:

Options:
0 . bottom-up parsing
1 . top-down parsing
2 . none of the above
3 . both a and b
4 . 
Correct Answer: 1

Explanation: Top-down parsing is a technique which constructs the parse tree from the start symbol and transforms it to the input symbol. This type of parsing is also referred to as predictive or recursive parsing. 

 Index: 8
Question: Which derivation is generated by the top-down parser?
CodeBlock:

Options:
0 . right-most derivation in reverse
1 . left-most derivation in reverse
2 . right-most derivation
3 . left-most derivation
4 . 
Correct Answer: 3

Explanation: Top-down parser generates the left-most derivation. It constructs the parse tree from left to right and constructs the left-most derivation of the specified sentence.

 Index: 9
Question: Which derivation is generated by the bottom-up parser?
CodeBlock:

Options:
0 . right-most derivation in reverse
1 . left-most derivation in reverse
2 . right-most derivation
3 . left-most derivation
4 . 
Correct Answer: 0

Explanation: Bottom-up parser generates the right-most derivation in reverse. It constructs the parse tree from the input string to the root and tries to construct the right-most derivation of the specified string backward. 

 Index: 10
Question: Which parser is most powerful in the following parsers?
CodeBlock:

Options:
0 . operator precedence
1 . slr
2 . canonical lr
3 . lalr
4 . 
Correct Answer: 2

Explanation: Canonical LR (CLR) is the most powerful parser than LALR and SLR. 

 Index: 11
Question: The output of the lexical analyzer is _______
CodeBlock:

Options:
0 . string character
1 . a syntax tree
2 . a set of re
3 . a set of tokens
4 . 
Correct Answer: 3

Explanation: Lexical analyzer gives the set of tokens as output. The set of tokens contains keywords, separators, literals, identifiers, and operators.

 Index: 12
Question: From the following grammars, which describes the lexical syntax?
CodeBlock:

Options:
0 . lexical grammar
1 . context-free grammar
2 . syntactic grammar
3 . regular grammar
4 . 
Correct Answer: 0

Explanation: Lexical grammar is a type of grammar which specifies the syntax of tokens.

 Index: 13
Question: Which grammar gives multiple parse trees for the same string?
CodeBlock:

Options:
0 . unambiguous
1 . regular
2 . ambiguous
3 . all of the above
4 . 
Correct Answer: 2

Explanation: Ambiguous grammar is a context-free grammar which gives more than one leftmost or rightmost derivation for the same specified sentence. 

 Index: 14
Question: In Compiler lexical analyzer is used for?
CodeBlock:

Options:
0 . removing comments
1 . removing whitespace
2 . breaking the syntaxes in the set of tokens
3 . all of the mentioned
4 . 
Correct Answer: 3

Explanation: Lexical analyzer is used in the compiler for removing the Whitespace and comments. It is also used in breaking the syntaxes into the set of tokens.

 Index: 15
Question: Which is considered as the sequence of characters in a token?
CodeBlock:

Options:
0 . mexeme
1 . lexeme
2 . texeme
3 . pattern
4 . 
Correct Answer: 1

Explanation: Lexemes are the string of alphanumeric characters in a single token. In the source program, lexemes are characters which are identified by the pattern for a token.

 Index: 16
Question: Which part of the compiler highly used the grammar concept?
CodeBlock:

Options:
0 . code optimization
1 . code generation
2 . parser
3 . lexical analysis
4 . 
Correct Answer: 2

Explanation: The concept of grammar is much used in the parser phase of the compiler.The parser phase is next to the lexical analysis phase in the compiler. Parser generated the parse tree using the predefined grammar. The parser has two different techniques for creating a different parse tree.

 Index: 17
Question: Which phase of the compiler checks the grammar of the programming? 
CodeBlock:

Options:
0 . code optimization
1 . semantic analysis
2 . code generation
3 . syntax analysis
4 . 
Correct Answer: 3

Explanation: Syntax Analysis is the 2nd phase of the compiler, which checks the given input string is the correct syntax of the programming language. 

 Index: 18
Question: Which of the following component is important for semantic analysis?
CodeBlock:

Options:
0 . yacc
1 . lex
2 . symbol table
3 . type checking
4 . 
Correct Answer: 3

Explanation: In the semantic analysis, type checking is an important component because it verifies the program's operations from the semantic conventions. 

 Index: 19
Question: Which phase of the compiler is also known as Scanner? 
CodeBlock:

Options:
0 . syntax analysis
1 . lexical analysis
2 . semantic analysis
3 . code generation
4 . 
Correct Answer: 1

Explanation: The first part of the compiler (lexical analysis) is also known as a scanner. It scans the characters from the source program and implements them to produce tokens.

 Index: 20
Question: Which phase of the compiler is also known as Parser?
CodeBlock:

Options:
0 . code optimization
1 . semantic analysis
2 . syntax analysis
3 . lexical analysis
4 . 
Correct Answer: 2

Explanation: The phase of the compiler next to the lexical analysis phase is also known as Parser.Syntax analysis or parser accepts the tokens produced by the lexical analysis and gives the parse tree in the output.

 Index: 21
Question: Which of the following parser is a top-down parser?
CodeBlock:

Options:
0 . an lalr parser
1 . a lr parser
2 . operator precedence parser
3 . recursive descent parser
4 . 
Correct Answer: 3

Explanation: Recursive descent parser is a type of top-down parser which generates the parse tree from top to bottom and reads the input string from left to right.

 Index: 22
Question: Keywords are recognized in a compiler during -
CodeBlock:

Options:
0 . the code generation
1 . the data flow analysis
2 . the lexical analysis of the program
3 . the program parsing
4 . 
Correct Answer: 2

Explanation: Keywords are firstly recognized during the lexical analysis of the program in the compiler. 

 Index: 23
Question: Leaf nodes in a parse tree indicate?
CodeBlock:

Options:
0 . sub-terminals
1 . half-terminals
2 . non-terminals
3 . terminals
4 . 
Correct Answer: 3

Explanation: All the leaf nodes in the parse tree indicate the terminals. And all the interior nodes indicate non-terminals.

 Index: 24
Question: Which graph describes the basic block and successor relationship?
CodeBlock:

Options:
0 . control graph
1 . dag
2 . flow graph
3 . hamilton graph
4 . 
Correct Answer: 2

Explanation: A flow graph is a graph of the compiler which describes the basic blocks and how the program control is passed between the blocks.

 Index: 25
Question: Which language is accepted by the push-down automata?
CodeBlock:

Options:
0 . type 0 language
1 . type 1 language
2 . type 2 language
3 . type 3 language
4 . 
Correct Answer: 2

Explanation: According to the Chomsky hierarchy, push down automata accepts the Type 2 language, which is used for context-free language. 

 Index: 26
Question: The most general phase of structured grammar is?
CodeBlock:

Options:
0 . context-sensitive grammar
1 . context-free grammar
2 . regular grammar
3 . all of these
4 . 
Correct Answer: 0

Explanation: Context-sensitive grammar is the most general phase of structured grammar because, in this grammar, the left-hand side and the right side contain the terminals or non-terminals. 

 Index: 27
Question: In the compiler, the function of using intermediate code is:
CodeBlock:

Options:
0 . to improve the register allocation
1 . to increase the error reporting & recovery.
2 . to make semantic analysis easier.
3 . to increase the chances of re-using the machine-independent code optimizer in other compilers.
4 . 
Correct Answer: 3

Explanation: After semantic analysis, the intermediate code increases the chances of reusing the machine-independent code optimizer in other compilers.

 Index: 28
Question: In how many types of optimization can be divided?
CodeBlock:

Options:
0 . two types
1 . three types
2 . four types
3 . five types
4 . 
Correct Answer: 0

Explanation: The code optimization technique is divided into machine-dependent and machine-independent types.

 Index: 29
Question: The value of which variable is updated inside the loop by a loop-invariant value?
CodeBlock:

Options:
0 . loop
1 . strength
2 . induction
3 . invariable
4 . 
Correct Answer: 2

Explanation: The value of the induction variable is updated inside the loop by a loop-invariant value. 

 Index: 30
Question: Which compiler runs on one machine and generates code for multiple machines?
CodeBlock:

Options:
0 . multipass compiler
1 . cross compiler
2 . optimizing compiler
3 . onepass compiler
4 . 
Correct Answer: 1

Explanation: Cross compiler is a compiler which runs on one machine and generates code for more than one machine. 

 Index: 31
Question: Which of the following is not a characteristic of the compiler?
CodeBlock:

Options:
0 . more execution time
1 . debugging process is slow
2 . the execution takes place after the removal of all syntax errors
3 . firstly scans the entire program and then transforms it into machine-understandable code
4 . 
Correct Answer: 0

Explanation: The compiler does not take more time to execute. So, more execution time is not a characteristic of the compiler. 

 Index: 32
Question: Which phenomenon happens when the non-terminal on the left side is repeated as the first symbol on the right side?
CodeBlock:

Options:
0 . left-most derivation
1 . left recursion
2 . left factoring
3 . left parsing
4 . 
Correct Answer: 1

Explanation: Left recursion is the process in which non-terminal on the left side of the production is the same on the right side as the leftmost symbol.

 Index: 33
Question: In which derivation the right-most non-terminal symbol is replaced at each step?
CodeBlock:

Options:
0 . right look ahead
1 . right claim
2 . rightmost
3 . right non-terminal
4 . 
Correct Answer: 2

Explanation: The rightmost derivation is that derivation of context-free grammar, which replaces the rightmost non-terminal symbol at each step. 

 Index: 34
Question: In which derivation the leftmost non-terminal symbol is replaced at each step?
CodeBlock:

Options:
0 . left recursion
1 . left non-terminal
2 . left pushdown
3 . leftmost
4 . 
Correct Answer: 3

Explanation: The leftmost derivation is that derivation of context-free grammar which replaces the leftmost non-terminal symbol at each step.

 Index: 35
Question: The compiler can detect what type of errors?
CodeBlock:

Options:
0 . neither logical nor grammatical error
1 . logical errors only
2 . grammatical errors only
3 . both grammatical and logical errors
4 . 
Correct Answer: 2

Explanation: Compiler is a computer program that detects grammatical errors, not logical errors. 

 Index: 36
Question: Which symbol is not related to context-free grammar?
CodeBlock:

Options:
0 . end symbol
1 . start symbol
2 . non-terminal symbol
3 . terminal symbol
4 . 
Correct Answer: 0

Explanation: Context-free grammar is that grammar which consists of the start symbol, set of terminals, set of non-terminal symbols and the set of productions.

 Index: 37
Question: Which method merges the multiple loops into the single one?
CodeBlock:

Options:
0 . constant folding
1 . loop rolling
2 . loop fusion or jamming
3 . none of the above
4 . 
Correct Answer: 2

Explanation: Loop fusion is an optimization technique which merges the multiple bodies of loops into a single body. This programming technique may reduce the runtime performance of the program. 

 Index: 38
Question: Which parser is known as the shift-reduce parser?
CodeBlock:

Options:
0 . bottom-up parser
1 . top-down parser
2 . both top-down and bottom-up
3 . none of the above
4 . 
Correct Answer: 0

Explanation: Bottom-up parser in the compiler is also called the shift-reduce parser.

 Index: 39
Question: Which of the following tree is the pictorial identification of the derivation?
CodeBlock:

Options:
0 . the oct tree
1 . the parse tree
2 . the binary tree
3 . none of the above
4 . 
Correct Answer: 1

Explanation: The tree which represents the syntactic structure of the string is known as the parse tree. It also indicates the terminal, start symbol, and non-terminal symbols.

 Index: 40
Question: The full form of YACC is:
CodeBlock:

Options:
0 . yet another computer computer
1 . yet another computer compiler
2 . yet another compiler computer
3 . yet another compiler compiler
4 . 
Correct Answer: 3

Explanation: The full form of YACC is Yet Another Compiler Compiler, which produces the LALR (1) grammar parser. 

 Index: 41
Question: What type of conflicts can occur in the shift-reduce parsing?
CodeBlock:

Options:
0 . reduce/reduce
1 . shift/reduce
2 . both shift/reduce and reduce/reduce
3 . none of the above
4 . 
Correct Answer: 1

Explanation: None

 Index: 42
Question: Which of the following grammar can be translated into DFAs?
CodeBlock:

Options:
0 . generic grammar
1 . left linear grammar
2 . right liner grammar
3 . all of the above
4 . 
Correct Answer: 2

Explanation: A right linear grammar is that grammar which contains all the non-terminals on the right-hand side at the right ends. This grammar can be simply converted into the DFA. 

 Index: 43
Question: Which algorithm invokes a function GETREG()?
CodeBlock:

Options:
0 . code motion algorithm
1 . code optimization algorithm
2 . intermediate code
3 . code generation algorithm
4 . 
Correct Answer: 3

Explanation: Code generation algorithm invokes the GETREG() function to check the status of available registers and the location where the result should be stored. This function also selects the registers for every memory location.

 Index: 44
Question: FORTRAN programming language is a _______
CodeBlock:

Options:
0 . turing language
1 . context-sensitive language
2 . context-free language
3 . regular language
4 . 
Correct Answer: 1

Explanation: Context-sensitive languages are those languages which are defined by context-sensitive grammar. 

 Index: 45
Question: The execution time of the code depends on?
CodeBlock:

Options:
0 . the usage of machine idioms
1 . the way the registers are used
2 . the orders in which the computations are performed
3 . all of the mentioned
4 . 
Correct Answer: 3

Explanation: None

 Index: 46
Question: Which optimization technique is used to reduce the multiple jumps?
CodeBlock:

Options:
0 . latter optimization technique
1 . peephole optimization technique
2 . local optimization technique
3 . code optimization technique
4 . 
Correct Answer: 1

Explanation: The peephole optimization technique is used to reduce the memory footprint and the size of code. It is also used to improve the program performance.

 Index: 47
Question: Which of the following term is used to keep track of the location where the current values of the name are stored?
CodeBlock:

Options:
0 . register descriptor
1 . address descriptor
2 . allocation descriptor
3 . flag register
4 . 
Correct Answer: 1

Explanation: The address descriptor is a descriptor of the code generator technique, which keeps track of the memory location. 

 Index: 48
Question: Which of the following are labeled by operator symbol?
CodeBlock:

Options:
0 . root
1 . interior nodes
2 . leaves
3 . nodes
4 . 
Correct Answer: 1

Explanation: In the compiler, interior nodes are specified by the operator symbol.

 Index: 49
Question: DAG is an abbreviation of?
CodeBlock:

Options:
0 . detecting acyclic graph
1 . data acyclic graph
2 . dynamic acyclic graph
3 . directed acyclic graph
4 . 
Correct Answer: 3

Explanation: DAG is a Directed Acyclic Graph, which is constructed using three address code for optimizing the basic blocks. 

 Index: 50
Question: Which of the following is used in various stages or phases of the compiler?
CodeBlock:

Options:
0 . records
1 . program
2 . symbol table
3 . table
4 . 
Correct Answer: 2

Explanation: A symbol table is simply a table which is created and maintained by the compiler and used in various phases of the compiler. 

 Index: 51
Question: Which of the following structure has four fields?
CodeBlock:

Options:
0 . parse tree
1 . triples
2 . indirect triples
3 . quadruples
4 . 
Correct Answer: 3

Explanation: Quadruples are a record structure in a compiler with four fields for implementing the three address code.

 Index: 52
Question: In which of the following tree, the leaf indicates the operand, and the interior node represents the operator. 
CodeBlock:

Options:
0 . syntax tree
1 . parser tree
2 . structured tree
3 . sematic tree
4 . 
Correct Answer: 0

Explanation: Syntax tree is a tree in the compiler which represents operands by leaf and operator by interior nodes.

 Index: 53
Question: Which statement is an abstract form of intermediate code? 
CodeBlock:

Options:
0 . 3- address
1 . 2-address
2 . address
3 . intermediate code
4 . 
Correct Answer: 0

Explanation: None

 Index: 54
Question: Which mapping is described by the implementation of the syntax-directed translator? 
CodeBlock:

Options:
0 . parse table
1 . input
2 . output
3 . input-output
4 . 
Correct Answer: 3

Explanation: Input-Output is a mapping which is described by the implementation of the syntax-directed translator (SDT).

 Index: 55
Question: Which of the following function is called the canonical collection of LR(0) item. 
CodeBlock:

Options:
0 . first
1 . goto
2 . compute
3 . follow
4 . 
Correct Answer: 1

Explanation: GOTO is a function that is called for defining the DFA. And, it is called the canonical collection of LR(0) item.

 Index: 56
Question: Which of the following option is not a function of the shift-reduce parser? 
CodeBlock:

Options:
0 . reduce
1 . accept
2 . go
3 . shift
4 . 
Correct Answer: 2

Explanation: The shift-reduce parser contains only shift, reduce, error and accept action. That's why Go is not a function of the shift-reduce parser. 

 Index: 57
Question: Which of the following grammar has no two adjacent non-terminals?
CodeBlock:

Options:
0 . irregular grammar
1 . regular grammar
2 . operator
3 . precedence grammar
4 . 
Correct Answer: 2

Explanation: Operator grammar is the grammar that does not contain two adjacent non-terminals on the right side of the production. It is that grammar that defines the mathematical operators.

 Index: 58
Question: DFA is an abbreviation of. 
CodeBlock:

Options:
0 . non deterministic finite set automata
1 . deterministic finite automata
2 . non deterministic finite automata
3 . deterministic finite set automata
4 . 
Correct Answer: 1

Explanation: The full form of DFA is Deterministic Finite Automata. It is also known as Deterministic Finite Acceptor. The automata read only one symbol from the input string at a time.

 Index: 59
Question: NFA is an abbreviation of. 
CodeBlock:

Options:
0 . non deterministic finite set automata
1 . deterministic finite automata
2 . non deterministic finite automata
3 . deterministic finite set automata
4 . 
Correct Answer: 2

Explanation: The full form of NFA is Non-Deterministic Finite Automata. It is also known as a Non-Deterministic Finite State-machine. An Automaton gives more than one possible transition of the same state.

]